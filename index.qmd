---
title: "Rickel Math 378 Final"
format:
  html:
    code-fold: true
---

```{r}
library(palmerpenguins)
library(dplyr)
library(ggplot2)

df <- palmerpenguins::penguins

df %>%
  group_by(species, sex) %>%
  summarise(
    across(
      where(is.numeric), 
      \(x) mean(x, na.rm = TRUE)
      )
    ) %>%
  knitr::kable()


## Penguin Size vs Mass by Species
df %>%
  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  geom_point() + 
  geom_smooth(method = "lm")

```

```{r}
df %>%
  group_by(species, sex) %>%
  summarise(
    across(
      ends_with("mm") | ends_with("g"),
      \(x) mean(x, na.rm = TRUE)
    )
  ) %>%
  dplyr::collect() %>%
  knitr::kable()
  
```

```         
```

```{python}
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing



```

```{python}
#import duckdb
#con = duckdb.connect('my-db.duckdb')
#df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
#con.close()
df = penguins.load_penguins().dropna()
df.head(3)
```

```{python}

X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']

model = LinearRegression().fit(X, y)


```

```{python}

print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
```

```{python}
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)

```

```{python}
from pins import board_folder
from vetiver import vetiver_pin_write

model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
```

```{python}
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)

```

```{python}
import logging
logging.basicConfig(
  format='%(asctime)s - %(message)s',
  level=logging.INFO
)
logging.info("App Started")
```

```{python}
logging.info("Request Made")
r = requests.post(api_url, json = [vals()])
logging.info("Request Returned")

if r.status_code != 200:
  logging.error("HTTP error returned")
  
return r.json().get('predict')[0]

```

```{python}

```

```         
```

```         
```
